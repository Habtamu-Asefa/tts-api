// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique @db.VarChar(50)
  password String
  role     Role    @default(TUTOR)
  tutor    Tutor?
  parent   Parent?
}

model Tutor {
  id                  Int       @id @default(autoincrement())
  fullName            String    @db.VarChar(50)
  email               String    @unique @db.VarChar(50)
  phone               String    @db.VarChar(15)
  gender              Gender
  age            Int?
  acadStatus          String?
  UEE                 Int?
  cGPA                Decimal?
  field               String?   @db.VarChar(50)
  college             String?
  volenteerism        String?
  prevTutored         Boolean?
  prevTutorGrades     String[]
  prevTutorExperience String?
  idealTutor          String?
  preferredBank       String?
  bankAccountNo       String?
  contactName         String?
  contactPhone1       String?   @db.VarChar(15)
  contactPhone2       String?   @db.VarChar(15)
  contactEmail        String?   @db.VarChar(50)
  workDays            Int?
  workHour            Int?
  experience          Boolean?
  subjects            String[]
  location            String    @db.VarChar(50)
  essay               String?
  hobby               String?
  profilePicture      String?
  reports             Report[]
  jobs                Job[]
  students            Student[]
  role                Role      @default(TUTOR)
  status              Status    @default(PENDING)
  user                User?     @relation(fields: [userId], references: [id])
  userId              Int?      @unique
}

model Job {
  id          Int      @id @default(autoincrement())
  title       String?   @db.VarChar(50)
  subtitle    String?   @db.VarChar(50)
  subjects    String[]
  location    String
  grade       String   @db.VarChar(30)
  description String?
  workDays            Int?
  workHour            Int?
  tutors      Tutor[]
  status      Status   @default(PENDING)
}

model Report {
  id                Int      @id @default(autoincrement())
  professionality   String?
  semiTotalHour     String?
  noDays     String?
  feedback     String?
  envChallenge     String?
  tuteeChallenge     String?
  yourChallenge     String?
  envResponse     String?
  tuteeResponse     String?
  yourResponse     String?
  envHelp     String?
  tuteeHelp     String?
  yourHelp     String?
  quiz              String?
  assg              String?
  test              String?
  subjects              String?
  topics              String?
  reportdate        DateTime @default(now())
  tutor             Tutor    @relation(fields: [tutorId], references: [id])
  tutorId           Int
}

model Parent {
  id             Int       @id @default(autoincrement())
  fullName       String    @db.VarChar(50)
  email          String?    @unique @db.VarChar(50)
  phone1         String?   @db.VarChar(15)
  phone2         String?   @db.VarChar(15)
  location       String    @db.VarChar(50)
  preferredBank  String?   @db.VarChar(50)
  profilePicture String?
  students       Student[]
  role           Role      @default(PARENT)
  status         Status    @default(PENDING)
  user           User?     @relation(fields: [userId], references: [id])
  userId         Int?      @unique
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique @db.VarChar(50)
  password String
  role     Role   @default(ADMIN)
}

model Student {
  id                  Int       @id @default(autoincrement())
  fullName            String    @db.VarChar(100)
  nickName            String?   @db.VarChar(50)
  gender              Gender
  age            Int?
  subjects            String[]
  grade               String?
  school              String?
  address             String?
  hobby               String?
  prevTutored         Boolean?
  prevTutorExperience String?
  idealTutor          String?
  workDays            Int?
  workHour            Int?
  tutor               Tutor?    @relation(fields: [tutorId], references: [id])
  tutorId             Int?
  parent              Parent    @relation(fields: [parentId], references: [id])
  parentId            Int
  status              Status    @default(PENDING)
}

enum Gender {
  Male
  Female
}

enum Role {
  TUTOR
  PARENT
  ADMIN
  SUPERADMIN
}

enum Status {
  PENDING
  FAILED
  SUCCESS
}
